}
#' Computes the profit-maximizing test size and profits for a multi-armed test & roll
#'
#' @param N deployment population
#' @param s standard deviations of the response (length 1(symmetric) or K)
#' @param mu vector of length K containing means of the priors on the mean response
#' @param sigma vector of length K containing the standard deviations of the priors on the mean response
#' @param K number of arms (treatments)
#' @param R number of simulation replications
#'
#' @return a list with the sample sizes and expected profit per customer
#' @export
#'
#' @examples test_size_nn_sim(N=1000, s=.1, mu=.1, sigma=.05, K=2, R=1000)
#'
test_size_nn_sim <- function(N, s, mu, sigma, K=2, R=1000) {
# computes the profit-maximizing test size for a multi-armed test & roll
# where response is normal with normal priors (possibly asymmetric)
# N is the size of the deployment population
# K is the number of arms
# s is a K-vector of (known) std devs of the response, if length(s)==1, symmetric priors are used
# mu is a K-vector of length K the means of the priors on the outcome
# sigma is a K-vector of std devs of the priors on the mean response
stopifnot(N > 2, sum(s <= 0) == 0, sum(sigma <= 0) == 0)
if (length(s==1)) { # symmetric arms
# n is same for all arms; solve by enumeration
s <- rep(s, K); mu <- rep(mu, K); sigma <- rep(sigma, K)
n_vals <- 1:(floor(N/K)-1) # potential values for n
reps <- foreach(i=1:R) %dopar% one_rep_test_size(n_vals, N, s, mu, sigma, K)
reps <- as.data.frame(do.call(rbind, reps))
exp_profit <- xtabs(profit ~ n, data=reps) / R
n <- rep(n_vals[which.max(exp_profit)], K)
} else { # asymmetric
stopifnot(length(mu)==K, length(s) == K, length(sigma) == K)
# todo:finish this
# best option is to use a numeric optimization, but then noise in profit_nn_sim
# becomes critical. comments out is one strategy
# start values based on two-arm symmetric
#n <- ( -3 * s[1]^2 + sqrt( 9*s[1]^4 + 4*N*s[1]^2*sigma[1]^2 ) ) / (4 * sigma[1]^2)
#n <- optim(par=log(n), fn=profit_nn_sim, control=list(fnscale=-1),
#           N=N, s=s, mu=mu, sigma=sigma, K=K, R=1000, log_n=TRUE)$par
#n <- optim(par=n, fn=profit_nn_sim, control=list(fnscale=-1),  # more precise simulation
#           N=N, s=s, mu=mu, sigma=sigma, K=K, R=5000, log_n=TRUE)$par
n <- NA
}
return(list(n=n, max(exp_profit)/N))
}
# SUMMARY FUNCTION =====
#' Provides summary of a test & roll plan
#'
#' @param n vector of length 2 containing the sample sizes
#' @param N deployment population
#' @param s known standard deviations of the outcome
#' @param mu means of the priors on the mean response
#' @param sigma standard deviations of the priors on the mean response
#'
#' @return a data frame containing summary statistics such as profit per customer,
#' profits from test phase, error rates, etc.
#' @export
#'
#' @examples test_eval_nn(n=c(100,100), N=1000, s=.1, mu=.1, sigma=.05)
#' test_eval_nn(n=c(100,200), N=1000, s=c(.1,.2), mu=c(.1,.2), sigma=c(.05,.1))
test_eval_nn <- function(n, N, s, mu, sigma) {
# provides a complete summary of a test & roll plan
# n is a vector of length 2 of sample sizes
# N is the size of the deployment population
# s is a vector of length 2 of the (known) std dev of the outcome
# mu is a vector of length 2 of the means of the prior on the mean response
# sigma is a vector of length 2 of the std dev of the prior on the mean response
# if length(n)=1, equal sample sizes are assumed
# if length(s)=1 symmetric priors are assumed and only the first elements of mu and sigma are used
stopifnot(N >= n[1] + n[2], n[1] > 0, n[2] >0, sum(s <= 0) == 0, sum(sigma <=0) == 0)
profit <- profit_nn(n, N, s, mu, sigma)*N
if (length(s)==1) { # symmetric
test <- mu[1] * (n[1] + n[2])
deploy <- profit - test
rand <- mu[1]*N # choose randomly
perfect <- profit_perfect_nn(mu, sigma)*N
error_rate <- error_rate_nn(n, s, sigma)
deploy_1_rate <- 0.5
gain <- profit-rand
} else { # assymetric
test <- mu[1] * n[1] + mu[2] *n[2]
deploy <- profit - test
rand <- ((mu[1] + mu[2])*0.5)*N
out <- profit_nn_sim(n, N, s, mu, sigma, R=10000)
perfect <- out$profit["exp_profit", "perfect_info"]*N
error_rate <- out$error_rate
gain <- profit-rand
#deploy_1_rate <- out$deploy_1_rate
}
gain <- (profit - rand) / (perfect - rand)
data.frame(n1=n[1], n2=n[2],
profit_per_cust = profit/N,
profit = profit,
profit_test = test,
profit_deploy = deploy,
profit_rand = rand,
profit_perfect = perfect,
profit_gain = gain,
regret = 1-profit/perfect,
error_rate = error_rate,
#deploy_1_rate = deploy_1_rate,
tie_rate = 0
)
}
test_eval_nn(n=c(100,100), N=1000, s=.1, mu=.1, sigma=.05)
library(devtools)
build_manual()
shiny::runApp('~/GitHub/testandrollApp')
library(shiny)
library(testandroll.pkg)
ui <- fluidPage(
titlePanel("Test and Roll Calculator"),
tabsetPanel(
tabPanel("Two-arm Test and Roll",
headerPanel(""),
fluidRow(
column(4, wellPanel("Population and Sample",
numericInput(inputId="N", label="N: Deployment Population",
value=1000))),
column(8,
column(8, wellPanel("graph")),
column(4, wellPanel("legend"))
)
),
fluidRow(
column(4, wellPanel("Priors and posteriors",
tabsetPanel(
tabPanel("Use Inputed Values",
numericInput(inputId="s", label="s: Posterior Standard Deviation",
value=.1),
numericInput(inputId="mu", label="mu: Prior Mean",
value=.1),
numericInput(inputId="sigma", label="sigma: Prior Standard Deviation",
value=.05),
uiOutput("n")
),
tabPanel("Use Uploaded Data",
fileInput("csvfile", "Choose CSV File",
multiple = TRUE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")),
uiOutput("ndata")
))
), wellPanel("User selected sample size comparison",
numericInput(inputId="usern", label="n: user selected sample size",
value=100))),
column(8,
column(4, wellPanel( plotOutput("priormRes"))),
column(4, wellPanel(plotOutput("priorRes"))),
column(4, wellPanel(plotOutput("priorEff")))
)
),
fluidRow(
column(4, wellPanel("Hypothesis Test Comparison",
numericInput(inputId="s", label="s: Posterior Standard Deviation",
value=.1),
numericInput(inputId="d", label="d: Minimum Detectable Difference",
value=.05),
numericInput(inputId="conf", label="conf: 1 - Type I error rate",
value=.95),
numericInput(inputId="power", label="power: 1- Type II error rate",
value=.80),
uiOutput("hn")
)),
column(8, wellPanel("Summary Table"))
)
),
tabPanel("K-arm Test and Roll",
fluidRow(column(12, "Not yet implemented..."))
)
)
)
server <- function(input, output) {
output$n <- renderUI({
N <- input$N
s <- input$s
mu <- input$mu
sigma <- input$sigma
n <- test_size_nn(N, s, mu, sigma)
HTML("n = ", n[1], ",", n[2])
})
output$hn <- renderUI({
s <- input$s
d <- input$d
conf <- input$conf
power <- input$power
N <- input$N
nh <- test_size_nht(s, d, conf, power, N)
HTML("n = ", nh)
})
output$ndata <- renderUI({
req(input$csvfile)
data_raw <- read.csv(input$csvfile$datapath, header=TRUE, sep=",")
resp <- data_raw$MeanResponse
mu <- mean(resp)
sigma <- sd(resp)
s <- sqrt(resp*(1-resp))
ndata <- test_size_nn(input$N, s, mu, sigma)
HTML("n = ", ndata)
})
output$priormRes <- renderPlot({
mu <- input$mu
sigma <- input$sigma
plot_prior_mean_resp_nn(mu, sigma)
})
output$priorRes <- renderPlot({
mu <- input$mu
sigma <- input$sigma
s <- input$s
plot_prior_resp_nn(s, mu, sigma)
})
output$priorEff <- renderPlot({
plot_prior_effect_nn(input$mu, input$sigma)
})
}
shinyApp(ui=ui, server=server)
read.cvs("sampledata.csv")
data
data <- read.cvs("sampledata.csv")
data
getwd()
getwd()
read.csv("sampledata")
getwd()
setwd("~/GitHub")
read.csv("sampledata")
read.csv("sampledata.csv")
getwd()
data <- read.csv("sampledata.csv")
resp <-
resp <- data[,3]
resp
mean(resp)
runApp('testandrollApp')
install.packages("shinyjs")
runApp('testandrollApp')
library(shinyBS)
runApp('testandrollApp')
library(shiny)
library(shinyBS)
library(testandroll.pkg)
ui <- fluidPage(
#all the tooltips
bsTooltip(id="csvfile", title=".csv files must have responses in the 3rd column (download sample
data to see an example)", placement="right", trigger="hover"),
#beginning of ui
titlePanel("Test and Roll Calculator"),
tabsetPanel(
tabPanel("Two-arm Test and Roll",
headerPanel(""),
fluidRow(
column(4, wellPanel("Population and Sample",
numericInput(inputId="N", label="N: Deployment Population",
value=1000))),
column(8,
column(8, wellPanel("graph")),
column(4, wellPanel("legend"))
)
),
fluidRow(
column(4, wellPanel("Priors and posteriors",
tabsetPanel(
tabPanel("Use Inputed Values",
numericInput(inputId="s", label="s: Posterior Standard Deviation",
value=.1),
numericInput(inputId="mu", label="mu: Prior Mean",
value=.1),
numericInput(inputId="sigma", label="sigma: Prior Standard Deviation",
value=.05),
actionButton("calinput", "Calculate"),
uiOutput("n")
),
tabPanel("Use Uploaded Data",
fileInput("csvfile", "Choose CSV File",
multiple = TRUE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")),
downloadButton("download", "Download Sample Data"),
uiOutput("ndata")
))
), wellPanel("User selected sample size comparison",
numericInput(inputId="usern", label="n: user selected sample size",
value=100))),
column(8,
column(4, wellPanel( plotOutput("priormRes"))),
column(4, wellPanel(plotOutput("priorRes"))),
column(4, wellPanel(plotOutput("priorEff")))
)
),
fluidRow(
column(4, wellPanel("Hypothesis Test Comparison",
numericInput(inputId="s", label="s: Posterior Standard Deviation",
value=.1),
numericInput(inputId="d", label="d: Minimum Detectable Difference",
value=.05),
numericInput(inputId="conf", label="conf: 1 - Type I error rate",
value=.95),
numericInput(inputId="power", label="power: 1- Type II error rate",
value=.80),
uiOutput("hn")
)),
column(8, wellPanel("Summary Table"))
)
),
tabPanel("K-arm Test and Roll",
fluidRow(column(12, "Not yet implemented..."))
)
)
)
server <- function(input, output) {
sG <- reactiveVal(.1)
muG <- reactiveVal(.1)
sigmaG <- reactiveVal(.05)
eventReactive(input$calinput,{
sG <- input$s
muG <- input$mu
sigmaG <- input$sigma
})
output$n <- renderUI({
N <- input$N
n <- test_size_nn(N, sG(), muG(), sigmaG())
HTML("n = ", n[1], ",", n[2])
})
output$hn <- renderUI({
s <- input$s
d <- input$d
conf <- input$conf
power <- input$power
N <- input$N
nh <- test_size_nht(s, d, conf, power, N)
HTML("n = ", nh)
})
output$ndata <- renderUI({
req(input$csvfile)
csvfile <- input$csvfile
data_raw <- read.csv(csvfile$datapath)
resp <- data_raw[,3]
mu <- mean(resp)
sigma <- sd(resp)
HTML("sigma = ", sigma)
s <- mean(sqrt(resp*(1-resp)))
ndata <- test_size_nn(input$N, s, mu, sigma)
HTML("n = ", ndata)
})
output$priormRes <- renderPlot({
mu <- input$mu
sigma <- input$sigma
plot_prior_mean_resp_nn(mu, sigma)
})
output$priorRes <- renderPlot({
mu <- input$mu
sigma <- input$sigma
s <- input$s
plot_prior_resp_nn(s, mu, sigma)
})
output$priorEff <- renderPlot({
plot_prior_effect_nn(input$mu, input$sigma)
})
}
shinyApp(ui=ui, server=server)
library(shiny)
library(shinyBS)
library(testandroll.pkg)
library(shinyBS)
library(testandroll.pkg)
library(shiny)
library(shinyBS)
library(testandroll.pkg)
ui <- fluidPage(
#all the tooltips
bsTooltip(id="csvfile", title=".csv files must have responses in the 3rd column (download sample
data to see an example)", placement="bottom", trigger="hover"),
#beginning of ui
titlePanel("Test and Roll Calculator"),
tabsetPanel(
tabPanel("Two-arm Test and Roll",
headerPanel(""),
fluidRow(
column(4, wellPanel("Population and Sample",
numericInput(inputId="N", label="N: Deployment Population",
value=1000))),
column(8,
column(8, wellPanel("graph")),
column(4, wellPanel("legend"))
)
),
fluidRow(
column(4, wellPanel("Priors and posteriors",
tabsetPanel(
tabPanel("Use Inputed Values",
numericInput(inputId="s", label="s: Posterior Standard Deviation",
value=.1),
numericInput(inputId="mu", label="mu: Prior Mean",
value=.1),
numericInput(inputId="sigma", label="sigma: Prior Standard Deviation",
value=.05),
actionButton("calinput", "Calculate"),
uiOutput("n")
),
tabPanel("Use Uploaded Data",
fileInput("csvfile", "Choose CSV File",
multiple = TRUE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")),
downloadButton("download", "Download Sample Data"),
uiOutput("ndata")
))
), wellPanel("User selected sample size comparison",
numericInput(inputId="usern", label="n: user selected sample size",
value=100))),
column(8,
column(4, wellPanel( plotOutput("priormRes"))),
column(4, wellPanel(plotOutput("priorRes"))),
column(4, wellPanel(plotOutput("priorEff")))
)
),
fluidRow(
column(4, wellPanel("Hypothesis Test Comparison",
numericInput(inputId="s", label="s: Posterior Standard Deviation",
value=.1),
numericInput(inputId="d", label="d: Minimum Detectable Difference",
value=.05),
numericInput(inputId="conf", label="conf: 1 - Type I error rate",
value=.95),
numericInput(inputId="power", label="power: 1- Type II error rate",
value=.80),
uiOutput("hn")
)),
column(8, wellPanel("Summary Table"))
)
),
tabPanel("K-arm Test and Roll",
fluidRow(column(12, "Not yet implemented..."))
)
)
)
server <- function(input, output) {
sG <- reactiveVal(.1)
muG <- reactiveVal(.1)
sigmaG <- reactiveVal(.05)
eventReactive(input$calinput,{
sG <- input$s
muG <- input$mu
sigmaG <- input$sigma
})
output$n <- renderUI({
N <- input$N
n <- test_size_nn(N, sG(), muG(), sigmaG())
HTML("n = ", n[1], ",", n[2])
})
output$hn <- renderUI({
s <- input$s
d <- input$d
conf <- input$conf
power <- input$power
N <- input$N
nh <- test_size_nht(s, d, conf, power, N)
HTML("n = ", nh)
})
output$ndata <- renderUI({
req(input$csvfile)
csvfile <- input$csvfile
data_raw <- read.csv(csvfile$datapath)
resp <- data_raw[,3]
mu <- mean(resp)
sigma <- sd(resp)
HTML("sigma = ", sigma)
s <- mean(sqrt(resp*(1-resp)))
ndata <- test_size_nn(input$N, s, mu, sigma)
HTML("n = ", ndata)
})
output$priormRes <- renderPlot({
mu <- input$mu
sigma <- input$sigma
plot_prior_mean_resp_nn(mu, sigma)
})
output$priorRes <- renderPlot({
mu <- input$mu
sigma <- input$sigma
s <- input$s
plot_prior_resp_nn(s, mu, sigma)
})
output$priorEff <- renderPlot({
plot_prior_effect_nn(input$mu, input$sigma)
})
}
shinyApp(ui=ui, server=server)
library(shinyjs)
read.csv("sampledata.csv")
read.csv("sampledata.csv", header=TRUE)
sampledata
sampledata
sampledata <- read.csv("sampledata.csv", header=TRUE)
getwd()
setwd("~/GitHub/testandrollApp")
sampledata <- read.csv("sampledata.csv", header=TRUE)
runApp()
shiny::runApp('~/GitHub/testandrollApp')
test_size_nn(100,1,1,.5)
runApp('~/GitHub/testandrollApp')
runApp('~/GitHub/testandrollApp')
runApp('~/GitHub/testandrollApp')
install.packages("doParallel")
devtools::install_github("https://github.com/mfang17/testandroll.pkg")
shiny::runApp('~/GitHub/testandrollApp')
shiny::runApp('~/GitHub/testandrollApp')
shiny::runApp('~/GitHub/testandrollApp')
