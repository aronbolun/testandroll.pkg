library(shiny)
library(shinyBS)
library(shinydashboard)
library(testandroll.pkg)
library(ggplot2)
library(readxl)
library(tools)

sampledata <- read.csv("sampledata.csv", header=TRUE)

ui <- fluidPage(
  #all the tooltips
  bsTooltip(id="download", title=".csv files must have responses in the 3rd column (download sample
            data to see an example)", placement="bottom", trigger="hover"),

  #beginning of ui
  titlePanel("Test and Roll Calculator"), tags$a(href="https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3274875", "Profit Maximizing A/B Tests"), " by Elea Feit and Ron Berman",
  tags$br("Website developed by Maxine Fang"), 
  tabsetPanel(
    tabPanel("Two-arm Test and Roll",
             headerPanel(""),
             column (4, wellPanel("Population", style = "background: #Dcecf4",
                                  numericInput(inputId="N", label="N: Deployment Population",
                                               value=1000)
             ), 
             wellPanel("Priors and posteriors", style = "background: #Dcecf4",
                       
                       tabsetPanel(
                         tabPanel("Use Inputed Values",
                                  numericInput(inputId="s", label="s: Posterior Standard Deviation",
                                               value=.1),
                                  numericInput(inputId="mu", label="mu: Prior Mean",
                                               value=.1),
                                  numericInput(inputId="sigma", label="sigma: Prior Standard Deviation",
                                               value=.05),
                                  actionButton("action1", "Calculate"),
                                  uiOutput("n")
                         ),
                         tabPanel("Use Uploaded Data", strong("Choose CSV/Excel File"), tags$br(), "Please make sure the column containing the mean responses
                                             is named \"Mean.Response\" (download sample data for an example)", 
                                  
                                  fileInput("file", "", 
                                            multiple = FALSE,
                                            accept = c("text/csv",
                                                       "text/comma-separated-values,text/plain",
                                                       ".csv", ".xls", ".xlsx")), 
                                  actionButton(inputId="action2", "Calculate"),
                                  downloadButton("download", "Download Sample Data"),
                                  uiOutput("ndata")
                         ))
             ), wellPanel("User selected sample size comparison",style = "background: #Dcecf4",
                          numericInput(inputId="usern", label="n: user selected sample size",
                                       value=100)), 
             wellPanel("Hypothesis Test Comparison", style = "background: #Dcecf4",
                       numericInput(inputId="sh", label="s: Posterior Standard Deviation",
                                    value=.1),
                       numericInput(inputId="d", label="d: Minimum Detectable Difference",
                                    value=.01),
                       numericInput(inputId="conf", label="conf: 1 - Type I error rate",
                                    value=.95),
                       numericInput(inputId="power", label="power: 1- Type II error rate",
                                    value=.80),
                       uiOutput("hn")
             )), 

               column(8, 
                          wellPanel(style = "background: white", fluidRow(column (8, plotOutput("bigplot")), 
                                         column (4, "Legend", div(
                          p("", 
                            span(style="color: #00FF00", 
                                 intToUtf8(9679)),
                            span(textOutput("green_text", inline = TRUE))
                          ),
                          p("",
                            span(style="color: #FF0000", 
                                 intToUtf8(9679)),
                            span(textOutput("red_text", inline = TRUE))
                          ),
                          p(span(style="color: #0000FF", 
                                 intToUtf8(9679)),
                            span(textOutput("blue_text", inline = TRUE))
                          ),
                          p(span(style="color: #FF00FF", 
                                 "---"
                          ),
                          "Profit-Perfect Information"), 
                          p(span(style="color: #05B0B7", 
                                 "---"
                          ), 
                          "No Information"
                          ),
                          align = "left")))), 
                    
                      fluidRow( 
                      column(4, wellPanel( plotOutput("priormRes"), style = "background: white")),
                      column(4, wellPanel(plotOutput("priorRes"), style = "background: white")),
                      column(4, wellPanel(plotOutput("priorEff"), style = "background: white"))), 
                      wellPanel("Summary Table", tableOutput("summary"), style = "background: white")
                    
    ),

    tabPanel("K-arm Test and Roll",
            fluidRow(column(12, "Not yet implemented..."))
    )
  )

))

server <- function(input, output) {
  #the reactive variables
  s <- reactiveVal(.1)
  mu <- reactiveVal(.1)
  sigma <- reactiveVal(.05)
  
  observeEvent(input$action1,{
    s(input$s)
    mu(input$mu)
    sigma(input$sigma)
  })
  
  #Plots the big profit plot
  output$bigplot <- renderPlot({
    N <- input$N
    usern <- input$usern
    nval <- seq(1, N/2)
    profits <- sapply(nval, FUN=profit_nn, N=N, s=c(s(),s()), mu=c(mu(),mu()), sigma=c(sigma(),sigma()))
    df <- data.frame(nval, profits)
    
    #Finding values to plot on the graph
    nmax <- test_size_nn(input$N, s(), mu(), sigma())
    profitmax <- profit_nn(nmax, input$N, s=c(s(),s()), mu=c(mu(),mu()), sigma=c(sigma(),sigma()))
    
    nh <- test_size_nht(input$s, input$d, input$conf, input$power, input$N)
    nhprofit <- profit_nn(nh, input$N, s=c(input$s,input$s), mu=c(mu(),mu()), sigma=c(sigma(),sigma()))
    
    usern <- input$usern
    userprofit <- profit_nn(usern, input$N, s=c(s(),s()), mu=c(mu(),mu()), sigma=c(sigma(),sigma()))
    
    perfectprofit <- profit_perfect_nn(mu(), sigma())
 
    ggplot (data=df, aes(x=nval, y=profits)) + geom_line() + ggtitle("Profit per Customer vs. Sample Size") +
    xlab("Sample Size (n)") + ylab("Profit per Customer") + 
    theme(plot.title = element_text(hjust = 0.5, face="bold", size=18)) +
    geom_point(aes(x = nmax[1], y = profitmax),
               color = "#FF0000",
               shape = 19,
               size = 3) +
    geom_point(aes(x = usern, y = userprofit),
               color = "#00FF00",
               shape = 19,
               size = 3) +
    geom_point(aes(x = nh, y = nhprofit),
               color = "#0000FF",
               shape = 19,
               size = 3) +
    geom_hline(aes(yintercept = perfectprofit),
               color = "#FF00FF", 
               linetype = 2) + 
      #No Information Profit Line
    geom_hline(aes(yintercept = mu()),
               color = "#05B0B7", 
               linetype = 2) 
  })
  
  #Text for the legend
  output$green_text <- renderText({
    "User-selected sample size"
  })
  
  output$blue_text <- renderText({
    "Hypothesis test sample size"
  })
  
  output$red_text <- renderText ({
    "Profit-maximizing sample size"
  })
  
  #Outputs for test and roll
  output$n <- renderUI({
  N <- input$N
  n <- test_size_nn(N, s(), mu(), sigma())
  n <- round(n)
  n <- paste("n = (", toString(n[1]), ",", toString(n[2]), ")")
  h4(strong(n))
  })

  #Outputs for hypothesis testing
  output$hn <- renderUI({
  s <- input$sh
  d <- input$d
  conf <- input$conf
  power <- input$power
  N <- input$N
  nh <- test_size_nht(s, d, conf, power, N)
  nh <- round(nh)
  nh <- paste("n = ", toString(nh))
  h4(strong(nh))
  })

  #Outputs for data upload
  observeEvent(input$action2,{
    req(input$file)
    path <- (input$file)$datapath
    ext <- tools::file_ext(path)
    
    if (ext=="csv") {
      data_raw <- read.csv(path)
      resp <- data_raw$Mean.Response
    }
    
    if (ext=="xls") {
      data_raw <- read_xls(path)
      resp <- data_raw$Mean.Response
    }
    
    if (ext=="xlsx") {
      data_raw <- read_xlsx(path)
      resp <- data_raw$Mean.Response
    }
   
    mu <- mean(resp)
    sigma <- sd(resp)
    s <- mean(sqrt(resp*(1-resp)))
    s(s)
    mu(mu)
    sigma(sigma)
  })
  
  output$ndata <- renderUI({
    ndata <- test_size_nn(input$N, s(), mu(), sigma())
    ndata <- round(ndata)
    ndata <- paste ("n = (", toString(ndata[1]), ",", toString(ndata[2]), ")")
    h4(strong(ndata))
  })

  #Outputs for plots
  output$priormRes <- renderPlot({
  plot_prior_mean_resp_nn(mu(), sigma())
  })

  output$priorRes <- renderPlot({
  plot_prior_resp_nn(s(), mu(), sigma())
  })

  output$priorEff <- renderPlot({
  plot_prior_effect_nn(mu(), sigma())
  })

  output$download <- downloadHandler(
    filename=function() {
      "sampledata.csv"
    },
    content=function(file){
    write.csv(sampledata, file)
    }
  )

  
  output$summary <- renderTable({
    #Calculating values for dataframe
    
    #Sample Size A/B (perfect, TS, T&R, usern, notest)
    nmax <- test_size_nn(input$N, s(), mu(), sigma())
    nh <- test_size_nht(input$s, input$d, input$conf, input$power, input$N)
    
    #Total Profit
    profperf <- round(profit_perfect_nn(mu(), sigma())*input$N,2)
      n <- test_size_nn(input$N, s(), mu(), sigma())
    proftandr <- round(profit_nn(n, input$N, s(), mu(), sigma())*input$N,2)
     nh <- test_size_nht(s(), input$d, input$conf, input$power, input$N)
    profhyp <- round(profit_nn(nh, input$N, s(), mu(), sigma())*input$N,2)
    profuser <- round(profit_nn(input$usern, input$N, s(), mu(), sigma())*input$N,2)
    notest <- mu()*input$N
    
    #Test Profit
    proftest.tandr <- round(mu()*n[1],2)
    proftest.hyp <- round(mu()*nh[1],2)
    proftest.user <- round(mu()*input$usern,2)
    
    #Deploy Profit (see below)
    
    #Percent Gains
    gainperf <- round((profperf-notest)/notest,4)
      gainperf <- paste(gainperf*100, "%")
    gaintandr <- round((proftandr-notest)/notest,4)
      gaintandr <- paste(gaintandr*100,"%")
    gainhyp <- round((profhyp-notest)/notest,4)
      gainhyp <- paste(gainhyp*100, "%")
    gainuser <- round((profuser-notest)/notest,4)
      gainuser <- paste(gainuser*100,"%")
      
    #Error Rate
    errortandr <- round(error_rate_nn(n, s(), sigma()),4)
      errortandr <- paste(errortandr*100, "%")
    errorhyp <- round(error_rate_nn(nh, s(), sigma()),4)
      errorhyp <- paste(errorhyp*100, "%")
    erroruser <- round(error_rate_nn(input$usern, s(), sigma()),4)
      erroruser <- paste(erroruser*100, "%")
    
    
    #Creating dataframe for summary output
    dfsum <- data.frame( 
      "Method"=c(
        "Perfect Information",
        "Thompson Sampling",
        "Test & Roll",
        "Hypothesis Test",
        "Selected Sample Size",
        "No Test"), 
      "Sample Size A (n1)"=
        c("NA", "NA", round(nmax[1]), round(nh[1]), input$usern, 0),
      "Sample Size B (n2)"=
        c("NA", "NA", round(nmax[2]), round(nh[1]), input$usern, 0),
      "Total Profit"=c(profperf, "NA", proftandr, profhyp, profuser, notest),
      "Test Profit"=c(0, "NA", proftest.tandr, proftest.hyp, proftest.user, 0),
      "Deploy Profit"=c(profperf, "NA", proftandr-proftest.tandr, profhyp-
                          proftest.hyp, profuser-proftest.user, notest),
      "Percentage of Gains Realized"=c(gainperf, "NA", gaintandr, gainhyp, gainuser, "0 %"),
      "Error Rate"=c("0 %", "NA", errortandr, errorhyp, erroruser, "50 %")
    ) 
    
    
    
    colnames(dfsum)<-c("Method","Sample Size A (n1)", "Sample Size B (n2)", "Total Profit",
                       "Test Profit", "Deploy Profit", "Percentage of Gains Realized", "Error Rate")
    
    dfsum  
  })

}

shinyApp(ui=ui, server=server)
