library(shiny)
library(shinyBS)
library(testandroll.pkg)
library(shinyjs)
sampledata <- read.csv("sampledata.csv", header=TRUE)

ui <- fluidPage(
  #all the tooltips
  bsTooltip(id="download", title=".csv files must have responses in the 3rd column (download sample
            data to see an example)", placement="bottom", trigger="hover"),

  #beginning of ui
  titlePanel("Test and Roll Calculator"),
  tabsetPanel(
    tabPanel("Two-arm Test and Roll",
             headerPanel(""),
             fluidRow(
               column(4, wellPanel("Population and Sample",
                                   numericInput(inputId="N", label="N: Deployment Population",
                                                value=1000))),

               column(8,
                      column(8, wellPanel("graph")),
                      column(4, wellPanel("legend"))
               )
             ),
             fluidRow(
               column(4, wellPanel("Priors and posteriors",
                                   tabsetPanel(
                                     tabPanel("Use Inputed Values",
                                   numericInput(inputId="s", label="s: Posterior Standard Deviation",
                                                value=1),
                                   numericInput(inputId="mu", label="mu: Prior Mean",
                                                value=1),
                                   numericInput(inputId="sigma", label="sigma: Prior Standard Deviation",
                                                value=.5),
                                   actionButton("calinput", "Calculate"),
                                   uiOutput("n")
                                   ),
                                    tabPanel("Use Uploaded Data",
                                             fileInput("csvfile", "Choose CSV File",
                                                       multiple = TRUE,
                                                       accept = c("text/csv",
                                                                  "text/comma-separated-values,text/plain",
                                                                  ".csv")),
                                             downloadButton("download", "Download Sample Data"),
                                             uiOutput("ndata")
                                             ))
                                   ), wellPanel("User selected sample size comparison",
                                                numericInput(inputId="usern", label="n: user selected sample size",
                                                             value=100))),
               column(8,
                      column(4, wellPanel( plotOutput("priormRes"))),
                      column(4, wellPanel(plotOutput("priorRes"))),
                      column(4, wellPanel(plotOutput("priorEff")))
               )
             ),
             fluidRow(
               column(4, wellPanel("Hypothesis Test Comparison",
                                   numericInput(inputId="sh", label="s: Posterior Standard Deviation",
                                                value=.1),
                                   numericInput(inputId="d", label="d: Minimum Detectable Difference",
                                                value=.05),
                                   numericInput(inputId="conf", label="conf: 1 - Type I error rate",
                                                value=.95),
                                   numericInput(inputId="power", label="power: 1- Type II error rate",
                                                value=.80),
                                   uiOutput("hn")
                                   )),
               column(8, wellPanel("Summary Table"))
             )
    ),

    tabPanel("K-arm Test and Roll",
            fluidRow(column(12, "Not yet implemented..."))
    )
  )

)
server <- function(input, output) {
  #G stands for global (the reactive variables)
  sG <- reactiveVal(.1)
  muG <- reactiveVal(.1)
  sigmaG <- reactiveVal(.05)

  observeEvent(input$calinput,{
    sG(1)
    muG(1)
    sigmaG(.5)
  })

  output$n <- renderUI({
  N <- input$N
  n <- test_size_nn(N, sG(), muG(), sigmaG())
  HTML("n = ", n[1], ",", n[2])
  })

  output$hn <- renderUI({
  s <- input$sh
  d <- input$d
  conf <- input$conf
  power <- input$power
  N <- input$N
  nh <- test_size_nht(s, d, conf, power, N)
  HTML("n = ", nh)
  })

  output$ndata <- renderUI({
  req(input$csvfile)
  csvfile <- input$csvfile
  data_raw <- read.csv(csvfile$datapath)
  resp <- data_raw[,3]
  mu <- mean(resp)
  sigma <- sd(resp)
  HTML("sigma = ", sigma)
  s <- mean(sqrt(resp*(1-resp)))
  ndata <- test_size_nn(input$N, s, mu, sigma)
  HTML("n = ", ndata)
  })

  output$priormRes <- renderPlot({
  mu <- input$mu
  sigma <- input$sigma
  plot_prior_mean_resp_nn(mu, sigma)
  })

  output$priorRes <- renderPlot({
  mu <- input$mu
  sigma <- input$sigma
  s <- input$s
  plot_prior_resp_nn(s, mu, sigma)
  })

  output$priorEff <- renderPlot({
  plot_prior_effect_nn(input$mu, input$sigma)
  })

  output$download <- downloadHandler(
    filename=function() {
      "sampledata.csv"
    },
    content=function(file){
    write.csv(sampledata, file)
    }
  )

}

shinyApp(ui=ui, server=server)
